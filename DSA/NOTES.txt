 -----------------------------------------------------------------------------------------------------------------------------------------------
 DATE: 21/08/2024
 -----------------------------------------------------------------------------------------------------------------------------------------------

 DATA STRUCTURE:
    -Data Struture is about how data can be store and use in different Strutures.

ALGORITHEM:
    -Algorithm is a step-by-step procedure for solving a problem.

ASYMPTOTIC NOTATIOIN:
    -Asymptotic notation is used to describe the time and space complexity of an algorithm.

    -There are mainly three type of notation:
        1. Big O notation: It is used to describe the upper bound or wrost case of an algorithm's time or
           space complexity.

        2. Big Ω notation: It is used to describe the lower bound of an algorithm's time or
           space complexity.

        3. Big Θ notation: It is used to describe the exact time or space complexity of an algorithm.


    -There are mainly two types of complexity for any program:
        1. Time complexity: It is the amount of time an algorithm takes to complete as a function of
           the size of the input.
        
        2. Space complexity: It is the amount of memory an algorithm takes to complete as a function of
           the size of the input.
    
        
                                       COMPLEXITY OF PROGRAM

      NOTATIOIN           |        NAME             |              DESCRIPTION
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(1)                | Constant                | The time taken by the algorithm is constant and does
                          |                         | not depend on the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(log n)            | Logarithmic             | The time taken by the algorithm is proportional
                          |                         | to the logarithm of the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(n)                | Linear                  | The time taken by the algorithm is proportional
                          |                         | to the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(n log n)          | Linearithmic            | The time taken by the algorithm is
                          |                         | proportional to the product of the size of the input and its logarithm
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(n^2)              | Quadratic               | The time taken by the algorithm is proportional
                          |                         | to the square of the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(2^n)              | Exponential             | The time taken by the algorithm is proportional
                          |                         | to 2 raised to the power of the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      O(n!)               | Factorial               | The time taken by the algorithm is proportional
                          |                         | to the factorial of the size of the input.
      --------------------|-------------------------|-----------------------------------------------------------------------------------
      

 -----------------------------------------------------------------------------------------------------------------------------------------------
 DATE: 22/08/2024
 -----------------------------------------------------------------------------------------------------------------------------------------------

LINKEDLIST:
   -A linked list is a linear data structure where each element is a separate object, known as a node.
   -Linklist nodes are randomly stored in the memory.
   -link field of Linklist is of self reerential type.

   -Each node contains two items:
      1. The data, and
      2. A reference (or link) to the next node in the sequence.

      -------    -------    -------    ---------
      |10|1k|--->|20|2k|--->|30|3k|--->|40|NULL|
      -------    -------    -------    ---------

   LinkedList over Array:
   
      -Dynamic memory allocation: Linked list can grow or shrink as needed.
      -Insertion and deletion: Linked list allows for efficient insertion and deletion of nodes at any position.
      -Memory usage: Linked list uses more memory than arrays because each node has a reference to the
       next node.
      -Random access: Linked list does not support random access, you have to traverse the list from
       the beginning to access a specific node.
      -Cache performance: Linked list can have poor cache performance because the memory is not contiguous.
      -Traversal: Linked list can be traversed in both forward and backward directions.
      -Search: Linked list can be searched in both forward and backward directions.
      -Sorting: Linked list can be sorted in both forward and backward directions.
      -Reversing: Linked list can be reversed in both forward and backward directions.
   

DOUBLY LINKEDLIST:
   -A doubly linked list is a type of linked list in which each node has two pointers,
      one pointing to the next node and the other pointing to the previous node.
   -This allows for efficient insertion and deletion of nodes at any position in the list.
   -It also allows for traversal in both forward and backward directions.
   -It is used in many applications such as database systems, file systems, and memory management.

CIRCULAR LINKEDLIST:
   -A circular linked list is a type of linked list in which the last node points back to
   the first node, forming a circle.
   -It is used in many applications such as circular buffers, circular queues, and
   circular stacks.
   
